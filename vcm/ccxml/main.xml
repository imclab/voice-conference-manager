<?xml version="1.0" encoding="UTF-8"?>
<ccxml version="1.0">

<!-- Copyright (c) 2004 by M. Yudkowsky, Disaggregate http://www.Disaggregate.com -->
<!-- See attached license for details and disclaimers -->

<!-- Main module: Dispatches other modules as needed. -->
<!-- $Header: /cvsroot/vcm/vcm/ccxml/main.xml,v 1.3 2005/02/16 02:04:20 myudkowsky Exp $ -->
<!-- $Id: main.xml,v 1.3 2005/02/16 02:04:20 myudkowsky Exp $ -->

<!-- Valid states for this call -->

<!-- list of symbolic substate names: -->

<var name="s_init"					expr="'s_init'"/>
<var name="s_welcomeBase"			expr="'s_welcomeBase'"/>
<var name="s_unknownCapabilities"	expr="'s_unknownCapabilities'"/>
<var name="s_findUserRequest"		expr="'s_findUserRequest'"/>
<var name="s_getConfereeList"		expr="'s_getConfereeList'"/>
<var name="s_makeConfObject"		expr="'s_makeConfObject'"/>
<var name="s_addConferees"			expr="'s_addConferees'"/>
<var name="s_confInProgress"		expr="'s_confInProgress'"/>
<var name="s_confCallOver"			expr="'s_confCallOver'"/>
<var name="s_Done"					expr="'s_Done'"/>
<var name="s_addBase"				expr="'s_addBase'"/>
<var name="s_exit"					expr="'s_exit'"/>

<!-- user event names -->
<var name="info"					expr="'info'"/>
<var name="nextstate"				expr="'nextstate'"/>

<!-- Vars used throughout -->

	<!-- overall state name. Initialize: -->
	<var name="callState" expr="s_init"/>
	<!-- name of conference object -->
	<var name="c_conferees"/>
	<var name="grammar_menu"/>

<!-- Variables used in various substates -->
	<!-- s_welcomeBase -->
		<var name="checkCallerID_timeout_count"		expr="0"/>
		<var name="checkCallerID_timeout_max"		expr="1"/>
		<var name="s_welcomeBase_gotdata"			expr="0"/>
		<var name="s_welcomeBase_finishedgreeting"	expr="0"/>
	
	<!-- s_findUserRequest -->
		<var name="s_findUserRequest_count"			expr="0"/>
		

	<!-- s_addConfeeres -->
		<var name="s_addConfeeres_listPtr"			expr="0"/>
		<var name="s_addConfeeres_addedCount"		expr="0"/>
		<var name="s_addConfeeres_rejCount"			expr="0"/>
		
		
	<!-- s_confInProgress -->
		<!-- max length conferees may speak -->
		<!-- now set to 5 minutes -->
		<var name="s_ConfMaxLength"					expr="300000"/>
		

<!-- List of phone numbers, and associated names, to add to conference call -->

<var name="phoneList" expr=""/>
<var name="phoneListCount" expr="0"/>
<var name="labelList" expr=""/>
<var name="currentPhone" />

<!-- count of calls aside from base call -->
<var name="callSequence" expr="0"/> 
<var name="callsOutstanding" expr="0"/>


<!-- Other variables -->
	<!-- Kill the call after 10 minutes no matter what -->
	<var name="killerTimeout" expr="600000"/>

<!-- URLs of VoiceXML scripts -->
<var name="vxml_prefix" expr="''"/>
<var name="vxml_type" expr="'application/xml+vxml;platform=motorola'"/>
<var name="vxml_greeting" expr=" vxml_prefix + 'greeting.vxml'"/>
<var name="vxml_goodbye"  expr=" vxml_prefix + 'goodbye.vxml'"/>
<var name="vxml_goodbye_error"  expr=" vxml_prefix + 'goodbye_error.vxml'"/>
<var name="vxml_menu"  expr=" vxml_prefix + 'menu.vxml'"/>
<var name="vxml_conference" expr=" vxml_prefix + 'conference.vxml'"/>
<var name="vxml_youarejoining" expr=" vxml_prefix + 'youarejoining.vxml'"/>
<var name="vxml_confinprogress" expr=" vxml_prefix + 'confinprogress.vxml'"/>
<var name="vxml_confcallisover" expr=" vxml_prefix + 'confcallisover.vxml'"/>
<var name="vxml_confstarted" expr=" vxml_prefix + 'confstarted.vxml'"/>
<var name="vxml_confStartError" expr=" vxml_prefix + 'confstarterror.vxml'"/>


<!-- URLs of CCXML scripts -->
<var name="ccxml_prefix" expr="''"/>
<var name="ccxml_conf_main" expr=" ccxml_prefix + 'conf_main.xml'"/>



<!-- URLs of CGI scripts -->
<var name="url_prefix" expr="'TOKEN_URL_CGI_PREFIX'"/>
<var name="url_event" expr="'http.post'"/>
<var name="url_CheckCallerID" expr="url_prefix + 'checkcallerid.cgi'"/>



<!-- PROGRAM BEGINS -->


<log expr="'Program begins...'"/>


<!-- On entry, get the caller id, which is used for user identification -->



<eventprocessor statevariable="callState">

	<!-- STATE s_init. Init the call * get it up and running -->
	
	<!-- Accept the call, check for database entry while accepting the call -->

	<transition state="s_init" event="connection.alerting" name="evt">
	
		<!-- for safety's sake while debugging, put in a timeout -->
		<send event="'killapp_timeout'" target="session.id" delay="killerTimeout" name="'killapp_timeout'"/>
		
	
	
		<!-- We know who the caller is but not privledges if any -->
		<!-- send callerid and find privileges, phone list, grammars -->
		<send event="url_event" target="url_CheckCallerID" name="'checkCallerID'" namelist="evt.callerid"/>
		
		<!-- Error if fetch from database takes more than 20 s -->
		<send event="'checkCallerID_timeout'" target="session.id" delay="20000" name="'checkCallerID_timeout'"/>
		
		<!-- save base call in case we need to use it to join other calls -->
		<var name="call_base" expr="evt.callerid"/>
		<var name="base_connectionid" expr="evt.connectionid"/>
		<accept/>
		
		<!-- change to next state to catch events: send, accept -->
		<assign name="callState" expr="s_welcomeBase"/>
		
	</transition>
	
	<!-- If call disconnects -->
	
	<transition state="s_init" event="connection.disconnected">
		<log expr="'Base call disconnected, exiting, state=' + callState"/>
		<exit/>
	</transition>	



	<!-- STATE s_welcomeBase. Play welcome message to base caller -->
	<!-- To leave this state, we must have played the message to the caller and received the info from the external database. -->
	
	<!-- Receive data from external lookup -->
	<transition state="s_welcomeBase" event="user.calleriddata" name="evt">
		<!-- 1. check to see if data is valid -->
		<if cond="evt.valid != 'True'">
			<log expr="'ERROR: External database claims number not valid'"/>
			<exit/>
		</if>
		
		<!-- 2. place data into variables with global scope -->
		<assign name="grammar_menu" expr="evt.grammar_menu"/>
		
		<!-- 3. If dialog is over, move to next state -->
		<if cond="s_welcomeBase_finishedgreeting == 1">
			<assign name="callState" expr="s_findUserRequest"/>
			<!-- fire off event to get us there -->
			<send event="nextstate" target="session.id" name="'nextstate_1'"/>
		</if>

		<!-- otherwise, just flag this as done -->
		<assign name="s_welcomeBase_gotdata" expr="1"/>
		
	</transition>
	
	<!-- If external lookup of data does not return within timeout -->
	<transition state="s_welcomeBase" event="user.checkCallerID_timeout" name="evt">
		<if cond="checkCallerID_timeout_count >= checkCallerID_timeout_max">
			<log expr="'ERROR: Unable to retrive caller ID information, exiting'"/>
			<exit/>
		<else/>
			<assign name="checkCallerID_timeout_count" expr="Number(checkCallerID_timeout_count) + Number(1)"/>
			<!-- fire it off again -->
			<send event="url_event" target="url_CheckCallerID" name="'checkCallerID'" namelist="evt.callerid"/>
		</if>
	</transition>

	<!-- Outright failure -->
	<transition state="s_welcomeBase" event="error.send.*" name="evt">
		<log expr="'ERROR: ' + evt.error + ' eventid: ' + evt.eventid"/>
		<exit/> <!-- what's really needed is an event fired off to a termination routine -->
	</transition>

	<!-- Play greeting via dialog when call connects -->
	
	<transition state="s_welcomeBase" event="connection.connected" name="evt">
		<log expr="'Base call connected'"/>
		<dialogstart src="vxml_greeting" type="vxml_type"/>
	</transition>

	<!-- Dialog finishes -->
	<transition state="s_welcomeBase" event="dialog.exit" name="evt">
		
		<!-- If we already have data, move to next state -->
		<if cond="s_welcomeBase_gotdata == 1">
			<!-- TEMPORARY: send to s_getConfereeList instead of s_findUserRequest -->
			<assign name="callState" expr="s_getConfereeList"/>
			<!-- fire off event to get us there -->
			<send event="nextstate" target="session.id" name="'nextstate_2'"/>
		</if>
	
		<!-- otherwise, just flag this as done -->
		<assign name="s_welcomeBase_finishedgreeting" expr="1"/>
	
	</transition>
	
	
	<!-- s_findUserRequest - Find user request -->
	
	<!-- Entry will be via a user.nextstate -->
	<transition state="s_findUserRequest" event="user.nextstate" name="evt">
		<!-- ask user to select action from menu -->
		<!-- menu was provided in s_welcomeBase from remote database -->
		<dialogstart src="vxml_menu" type="vxml_type" connectionid="base_connectionid" namelist="grammar_menu s_findUserRequest_count"/>
		<!-- Depend on timeouts from the VoiceXML VUI. Do not issue a timeout event. -->
	</transition>
	
	<!-- Implement User's Menu Selection -->
	<transition state="s_findUserRequest" event="dialog.exit" name="evt">
		
		<if cond="evt.menu_dropcall == 'True'">
			<!-- VUI says to drop call -->
			<dialogstart src="vxml_goodbye_error" type="vxml_type"/>
			<assign name="callState" expr="s_exit" />
		</if>
		
		<if cond="evt.menu_choice == 'conference'">
			<assign name="callState" expr="s_getConfereeList"/>
			<send event="nextstate" target="session.id"/> 
		<else/>
			<!-- No other menu items available at present time -->
			<!-- Increment counter of how many chances we gave user -->
			<assign name="s_findUserRequest_count" expr="Number(s_findUserRequest_count) + Number(1)" />
			<!-- Ask again. Let VUI decide how many chances to give user and what to say -->
			<dialogstart src="vxml_menu" type="vxml_type" namelist="grammar_menu s_findUserRequest_count"/>
		</if>
	
	</transition>
	
	<!-- s_getConfereeList -->
	
	<transition state="s_getConfereeList" event="user.nextstate" name="evt">
		<dialogstart src="vxml_conference" type="vxml_type" connectionid="base_connectionid"/>
	</transition>

	
		
	<transition state="s_getConfereeList" event="dialog.exit" name="evt">

		<log expr="'Found ' + evt.count + ' numbers, to wit: ' + evt.numberlist"/>
		<!-- expr="new Array(evt.numberlist.split(' ')" -->
		<!-- <assign name="phoneList" expr="evt.numberlist.split(' ')"/> -->
		<!-- make certain we get array of strings, not a string literal we treat as array -->
		<assign name="phoneList" expr="evt.numberlist"/>
		<assign name="phoneListCount" expr="evt.count"/>
		<assign name="labelList" expr="evt.labellist"/>
		
		
		<if cond="phoneListCount == 0 ">
			<!-- No names. Announce and exit. DEMO: just exit -->
			<assign name="callState" expr="s_exit"/>
		<else/>
			<!-- start calling -->
			<assign name="callState" expr="s_makeConfObject"/>
		</if>
		
		<!-- Get to next state -->
		<send event="nextstate" target="session.id" />

	</transition>

	
	
	
	<!-- s_makeConfObject. Start a new CCXML document that will handle the conference call -->
	
	
	
	<!-- fetch the conference document -->
	<transition state="s_makeConfObject" event="user.nextstate" name="evt">
		<fetch next="ccxml_conf_main" fetchid="foo"/> 
	</transition>
	
	<!-- start it when it becomes available -->
	<transition state="s_makeConfObject" event="fetch.done" name="evt">
		<!-- start conf handling document -->
		<createccxml fetchid="evt.fetchid" sessionid="conf_session" />
		<!-- send info to that document -->
		<send event="info" target="conf_session" namelist="phoneList labelList phoneListCount"/>
		<!-- tell our user that we have been successful -->
		<dialogstart src="vxml_confstarted" type="vxml_type" connectionid="base_connectionid"/>
	</transition>

	<!-- in case of fetch error, do something intelligent -->
	<transition state="s_makeConfObject" event="error.fetch" name="evt">
		<dialogstart src="vxml_confStartError" type="vxml_type" connectionid="base_connectionid"/>
	</transition>
	
	<!-- done announcing -->
	<transition state="s_makeConfObject" event="dialog.exit" name="evt">
		<!-- user notified of conf start. APP: ask for next task. DEMO: exit -->
		<assign name="callState" expr="s_exit"/> 
		<send event="nextstate" target="session.id" />
	</transition>

	
	
	<!-- s_exit.  -->
	
	
	
	<!-- tell the conf controller goodbye -->
	<transition state="s_exit" event="user.nextstate" name="evt">
		<dialogstart src="vxml_goodbye" type="vxml_type" connectionid="base_connectionid"/>
		<assign name="callState" expr="s_exit"/>
	</transition>

	<!-- s_exit - Used to exit the application after a goodbye announcement -->
	<transition state="s_exit" event="dialog.exit" name="evt">
		<exit/>
	</transition>
	
	<!-- Even if there's a dialog error, exit anyway, just means the conf controller hung up -->
	<transition state="s_exit" event="error.document" name="evt">
		<exit/>
	</transition>

	
	<!-- General purpose handlers -->
	
	<!-- General purpose error handlers -->
	
	<!-- Disconnect if (and only if) base call disconnects -->
	<transition event="connection.disconnected" name="evt">
		<if cond="evt.connectionid == call_base">
			<log expr="'Base call disconnected, exiting'"/>
			<exit/>
		</if>
	</transition>


	<transition event="call.CALL_INVALID">
		<log expr="'Invalid call, exiting, while in state ' + callState"/>
		<exit/>
	</transition>

	<transition event="error.document" name="evt">
		<log expr="'ERROR: in &quot;main.xml&quot;, &quot;' + evt.error + '&quot; while in state ' + callState + ', exiting now'" />
		<exit/>
	</transition>
	
	<transition event="error.*">
		<log expr="'ERROR: &quot;' + evt.error + '&quot; while in state ' + callState + ', exiting now'"/>
		<exit/>
	</transition>
	
	<transition event="system.ping">
		<log expr="'ERROR: received system.ping, we must be dead'"/>
		<exit/>
	</transition>
	
	<!-- Final emergency debugging timeout -->
	<transition event="user.killapp_timeout">
		<exit/>
	</transition>

</eventprocessor>

<!-- WARNING! Code found here will execute *before* eventprocessor! -->

</ccxml>
